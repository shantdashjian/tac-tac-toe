{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","squares","renderSquare","i","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","current","winner","calculateWinner","moves","map","step","move","desc","jumpTo","newHistory","slice","length","concat","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kMAIA,SAASA,EAAOC,GACZ,OACI,wBACIC,UAAU,SACVC,QAASF,EAAME,QAFnB,SAGKF,EAAMG,QAMnB,SAASC,EAAT,GAAsC,IAArBC,EAAoB,EAApBA,QAASH,EAAW,EAAXA,QAChBI,EAAe,SAACC,GAClB,OAAO,cAACR,EAAD,CACHI,MAAOE,EAAQE,GACfL,QAAS,kBAAMA,EAAQK,OAG/B,OACI,gCACI,sBAAKN,UAAU,YAAf,UACKK,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKL,UAAU,YAAf,UACKK,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,sBAAKL,UAAU,YAAf,UACKK,EAAa,GACbA,EAAa,GACbA,EAAa,SAO9B,SAASE,EAAKR,GAAQ,IAyCdS,EAzCa,EACaC,mBAAS,CAAC,CACpCL,QAASM,MAAM,GAAGC,KAAK,SAFV,mBACVC,EADU,KACDC,EADC,OAImBJ,mBAAS,GAJ5B,mBAIVK,EAJU,KAIEC,EAJF,OAKaN,oBAAS,GALtB,mBAKVO,EALU,KAKDC,EALC,KA2BXC,EAAUN,EAAQE,GAClBK,EAASC,EAAgBF,EAAQd,SAEjCiB,EAAQT,EAAQU,KAAI,SAACC,EAAMC,GAC7B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACJ,OACI,6BACI,wBAAQvB,QAAS,kBAdd,SAACsB,GACZR,EAAcQ,GACdN,EAAYM,EAAO,IAAO,GAYKG,CAAOF,IAA9B,SAAsCC,KADjCD,MAajB,OALIhB,EADAW,EACS,WAAaA,EAEb,iBAAmBH,EAAU,IAAM,KAI5C,sBAAKhB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACG,EAAD,CACIC,QAASc,EAAQd,QACjBH,QAAS,SAACK,GAAD,OA9CL,SAACA,GACjB,IAAMqB,EAAaf,EAAQgB,MAAM,EAAGd,EAAa,GAC3CI,EAAUS,EAAWA,EAAWE,OAAS,GACzCzB,EAAO,YAAOc,EAAQd,SACxBgB,EAAgBhB,IAAYA,EAAQE,KAGxCF,EAAQE,GAAKU,EAAU,IAAM,IAC7BH,EAAWc,EAAWG,OAAO,CAAC,CAC1B1B,QAASA,MAEbW,EAAcY,EAAWE,QACzBZ,GAAYD,IAkCgBe,CAAYzB,QAEpC,sBAAKN,UAAU,YAAf,UACI,8BAAMQ,IACN,6BAAKa,UAerB,SAASD,EAAgBhB,GAWrB,IAVA,IAAM4B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF1B,EAAI,EAAGA,EAAI0B,EAAMH,OAAQvB,IAAK,CAAC,IAAD,cACjB0B,EAAM1B,GADW,GAC5B2B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GAClE,OAAO/B,EAAQ6B,GAGvB,OAAO,KAvBXG,IAASC,OACL,cAAC9B,EAAD,IACA+B,SAASC,eAAe,W","file":"static/js/main.2d4879be.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button\n            className=\"square\"\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n\n}\n\nfunction Board({ squares, onClick }) {\n    const renderSquare = (i) => {\n        return <Square\n            value={squares[i]}\n            onClick={() => onClick(i)} />;\n    }\n\n    return (\n        <div>\n            <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    );\n\n}\n\nfunction Game(props) {\n    const [history, setHistory] = useState([{\n        squares: Array(9).fill(null),\n    }]);\n    const [stepNumber, setStepNumber] = useState(0);\n    const [xIsNext, setXIsNext] = useState(true);\n\n    const handleClick = (i) => {\n        const newHistory = history.slice(0, stepNumber + 1);\n        const current = newHistory[newHistory.length - 1];\n        const squares = [...current.squares];\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = xIsNext ? 'X' : 'O';\n        setHistory(newHistory.concat([{\n            squares: squares,\n        }]));\n        setStepNumber(newHistory.length);\n        setXIsNext(!xIsNext);\n    }\n\n    const jumpTo = (step) => {\n        setStepNumber(step);\n        setXIsNext((step % 2) === 0);\n    }\n\n    const current = history[stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n        const desc = move ?\n            'Go to move #' + move :\n            'Go to game start';\n        return (\n            <li key={move}>\n                <button onClick={() => jumpTo(move)}>{desc}</button>\n            </li>\n        );\n    });\n\n    let status;\n    if (winner) {\n        status = 'Winner: ' + winner;\n    } else {\n        status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board\n                    squares={current.squares}\n                    onClick={(i) => handleClick(i)} />\n            </div>\n            <div className=\"game-info\">\n                <div>{status}</div>\n                <ol>{moves}</ol>\n            </div>\n        </div>\n    );\n\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n// Declaring a winner\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n"],"sourceRoot":""}